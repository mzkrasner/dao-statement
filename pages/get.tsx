import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useState, useEffect } from "react";
import type { BasicProfile } from "@datamodels/identity-profile-basic";
import { useCeramicContext } from "../context";
import { authenticateCeramic } from "../utils";
import styles from "../styles/Home.module.css";

const Home: NextPage = () => {
  const clients = useCeramicContext();
  const { ceramic, composeClient } = clients;
  const [profile, setProfile] = useState<BasicProfile | undefined>();
  const [loading, setLoading] = useState<boolean>(false);
  const [address, setAddress] = useState('');
  const [contract, setContract] = useState("");
  const [statement, setStatement] = useState("");


  const handleLogin = async () => {
    const authed = await authenticateCeramic(ceramic, composeClient);
    setAddress(authed)
    await getProfile();
  };

  const getProfile = async () => {
    setLoading(true);
    if (ceramic.did !== undefined) {
      const profile = await composeClient.executeQuery(`
        query {
          viewer {
            basicProfile {
              id
              name
              description
              gender
              emoji
            }
          }
        }
      `);
      setProfile(profile?.data?.viewer?.basicProfile);
      setLoading(false);
    }
  };

  const getStatement = async () => {
    if (ceramic.did && contract) {
      const query = await composeClient.executeQuery(`
      query {
        node(id: "${address}") {
            ... on CeramicAccount {
            id
            delegateStatementList(first: 100) {
                edges {
                node {
                    id
                    daoContractAddress
                    intentStatement
                    version
                    author{
                      id
                    }
                }
              }
            }
          } 
        }
      } 
      `);
      console.log(query)
      const results = query.data?.node?.delegateStatementList.edges;
      results.forEach(item => {
        console.log(item.node)
        if(item.node.daoContractAddress === contract){
            console.log(item.node.intentStatement)
            setStatement(item.node.intentStatement)
            console.log(statement)
            return statement
        }
      })
      return results;
    }
    return undefined;
  };


  /**
   * On load check if there is a DID-Session in local storage.
   * If there is a DID-Session we can immediately authenticate the user.
   * For more details on how we do this check the 'authenticateCeramic function in`../utils`.
   */
  useEffect(() => {
    if (localStorage.getItem("did")) {
      handleLogin();
    }
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create ceramic app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {profile === undefined && ceramic.did === undefined ? (
          <button
            onClick={() => {
              handleLogin();
            }}
          >
            Login
          </button>
        ) : (
          <>
            {" "}
            <div className={styles.form}>
              <div className={styles.formGroup}>
                <label>DAO Contract Address</label>
                <textarea
                  style={{"height": "3rem", "width": "50rem", "padding": "1rem"}}
                  value={contract}
                  onChange={(e) => {
                    setContract(e.target.value);
                  }}
                />
              </div>
              <div className={styles.formGroup}>
                <label>Statement Result:</label>
                <textarea
                  style={{"height": "10rem", "width": "50rem", "padding": "1rem"}}
                  value={statement}
                  onChange={(e) => {
                    setStatement(e.target.value);
                  }}
                />
              </div>
              <button
                onClick={() => {
                  getStatement();
                }}
              >
                {loading ? "Loading..." : "Get statement"}
              </button>
            </div>
          </>
        )}
      </main>
    </div>
  );
};

export default Home;
